<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Creation Setup">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">10.196.173.140</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">environment URL</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">8001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/perf/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/api-gateway/novopay/v1</stringProp>
          </elementProp>
          <elementProp name="npPATH" elementType="Argument">
            <stringProp name="Argument.name">npPATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/api-gateway/api/novopay/v1</stringProp>
          </elementProp>
          <elementProp name="mfiURL" elementType="Argument">
            <stringProp name="Argument.name">mfiURL</stringProp>
            <stringProp name="Argument.value">qa-mfi.novopay.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sesPath" elementType="Argument">
            <stringProp name="Argument.name">sesPath</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/novopay/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="perfURL" elementType="Argument">
            <stringProp name="Argument.name">perfURL</stringProp>
            <stringProp name="Argument.value">mfi-perf.novopay.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMNPATH" elementType="Argument">
            <stringProp name="Argument.name">BPMNPATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/bpmn/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OTP" elementType="Argument">
            <stringProp name="Argument.name">OTP</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="voterIdLocation" elementType="Argument">
            <stringProp name="Argument.name">voterIdLocation</stringProp>
            <stringProp name="Argument.value">./voterIdImage.jpg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">agentapp.usli.hdfcbank.com   -   agentapp-ppd.usli.hdfcbank.com  - preprod-mfi.novopay.in https://dev1-mfi.novopay.in/</stringProp>
      </Arguments>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="emp-Id generator" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">7000</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">empID</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Globals" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="URL" elementType="Argument">
            <stringProp name="Argument.name">URL</stringProp>
            <stringProp name="Argument.value">mfi-perf.novopay.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">mfi-perf-yugabyte.novopay.in</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/perf/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/api-gateway/novopay/v1</stringProp>
          </elementProp>
          <elementProp name="npPATH" elementType="Argument">
            <stringProp name="Argument.name">npPATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mfiURL" elementType="Argument">
            <stringProp name="Argument.name">mfiURL</stringProp>
            <stringProp name="Argument.value">qa-mfi.novopay.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sesPath" elementType="Argument">
            <stringProp name="Argument.name">sesPath</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/novopay/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="perfURL" elementType="Argument">
            <stringProp name="Argument.name">perfURL</stringProp>
            <stringProp name="Argument.value">mfi-perf.novopay.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMNPATH" elementType="Argument">
            <stringProp name="Argument.name">BPMNPATH</stringProp>
            <stringProp name="Argument.value">/api-gateway/api/bpmn/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OTP" elementType="Argument">
            <stringProp name="Argument.name">OTP</stringProp>
            <stringProp name="Argument.value">123456</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="voterIdLocation" elementType="Argument">
            <stringProp name="Argument.name">voterIdLocation</stringProp>
            <stringProp name="Argument.value">./tooo.jpg</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Creation - Role, Employee and Office" enabled="true">
        <stringProp name="TestPlan.comments">4087</stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <intProp name="ThreadGroup.num_threads">50000</intProp>
        <intProp name="ThreadGroup.ramp_time">8000</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Timestamp Variable" enabled="true">
          <stringProp name="variableName">timestamp</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <stringProp name="minimumValue">100000</stringProp>
          <stringProp name="maximumValue">999999</stringProp>
          <stringProp name="randomSeed"></stringProp>
          <boolProp name="perThread">true</boolProp>
        </RandomVariableConfig>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config --voterID" enabled="false">
          <stringProp name="filename">./voterIDs.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">voterID</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Common Data Usage" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="content" elementType="Argument">
              <stringProp name="Argument.name">content</stringProp>
              <stringProp name="Argument.value">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</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vtc_id" elementType="Argument">
              <stringProp name="Argument.name">vtc_id</stringProp>
              <stringProp name="Argument.value">224476</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config  for offfice address details" enabled="false">
          <stringProp name="filename">./OfficeDetails.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">vtc_id1,pincode,name,district,sub_district,hierarchy_element_id,address_id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.thread</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="VTC">
          <stringProp name="filename">./UP_02_VTC.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">country_code,country_language,country,state,state_code,district,district_code,sub_district,sub_district_code,village_name,village_code,census_code,region,language,pincode,risk_category</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">${session_token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VTC" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login " enabled="false">
            <stringProp name="TestPlan.comments">EMP2898</stringProp>
            <stringProp name="HTTPSampler.domain">${URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${npPATH}/login</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;headers&quot;: {&#xd;
		&quot;tenant_code&quot;: &quot;mfi&quot;,&#xd;
		&quot;function_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;function_sub_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;channel_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_ip&quot;: &quot;&quot;,&#xd;
		&quot;stan&quot;: &quot;${timestamp}${timestamp}${__RandomString(42,1234567890,)} &quot;,&#xd;
		&quot;transmission_datetime&quot;: &quot;${timestamp}${timestamp}${__RandomString(42,1234567890,)} &quot;,&#xd;
		&quot;operation_mode&quot;: &quot;SYSTEM&quot;,&#xd;
		&quot;run_mode&quot;: &quot;REAL&quot;,&#xd;
		&quot;actor_type&quot;: &quot;ADMIN&quot;&#xd;
	},&#xd;
	 &quot;request&quot;: {&#xd;
        &quot;handle_type&quot;: &quot;USERNAME&quot;,&#xd;
        &quot;handle_value&quot;: &quot;SYSUSERCHECKER&quot;,&#xd;
        &quot;auth_type&quot;: &quot;PASSWORD&quot;,&#xd;
        &quot;auth_value&quot;: &quot;U2RSWEZQb3JNVURQRkFzZWRVbno0T2lHbnUzNkRaTmNhWXpyOHo2WDNJZ2NONWwrOGlVdmlGd2tnSlVGQzNKaUMwU0NldGwzVHppVko2ZHYxNVZ4ckE3VWZEcXFnMklSb29XUDhNSEFiTUV4MU81QWwrL1RsejRGUS9tbHpCVXRGRk9QVUFRemoyVG9qWFl4Rkg4eEZrTkVGa3RYUTlFdWZhMjcwSzBhZGVHYk1vUWFTSVdNbzNTWkpPaDVNMUlOVkhzWW1Va3NGMmY1eFpyTmhIYUM5ZVMyWlpuTWhiaHAzMHBNNSsyYlBua044dVFrY25HRFphTUFZSkdqbzdUMmpLeGx4aWhzOWNkR3U2VS8wVEFvUjFtR29iVmUzb0Zwb0xBTzVHR1hEZnZRZ2thYlN5WDMxek1BbTluS0t0THhrNHVLVU9keE9CTFZVRUNCLzc0WFFRPT0=&quot;&#xd;
    }&#xd;
&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sessionKey Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">session_token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;session_token&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="officeID Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">office_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.office_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-User Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">notFound</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for session token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">session_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for user_id" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query"> ${__setProperty(sesh,${session_token})}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Employee ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">empId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.employee_details.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateOrUpdateCsdHierElmVtc" enabled="true">
            <stringProp name="HTTPSampler.domain">${URL}</stringProp>
            <stringProp name="HTTPSampler.port">${PORT}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">${npPATH}/createOrUpdateCsdHierElmVtc</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;headers&quot;: {&#xd;
		&quot;tenant_code&quot;: &quot;mfi&quot;,&#xd;
		&quot;function_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;function_sub_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;channel_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_ip&quot;: &quot;&quot;,&#xd;
		&quot;transmission_datetime&quot;: &quot;${timestamp}&quot;,&#xd;
		&quot;stan&quot;: &quot;${__RandomString(42,1234567890,)}&quot;,&#xd;
		&quot;operation_mode&quot;: &quot;SYSTEM&quot;,&#xd;
		&quot;run_mode&quot;: &quot;REAL&quot;,&#xd;
		&quot;actor_type&quot;: &quot;CUSTOMER&quot;,&#xd;
		&quot;user_id&quot; : &quot;2&quot;&#xd;
	},&#xd;
	 &quot;request&quot;: {&#xd;
        &quot;country_code&quot;: &quot;${country_code}&quot;,&#xd;
        &quot;country_language&quot;: &quot;${country_language}&quot;,&#xd;
        &quot;country&quot;: &quot;${country}&quot;,&#xd;
        &quot;state&quot;: &quot;${state}&quot;,&#xd;
        &quot;district&quot;: &quot;${district}&quot;,&#xd;
        &quot;sub_district&quot;: &quot;${sub_district}&quot;,&#xd;
        &quot;village_name&quot;: &quot;${village_name}&quot;,&#xd;
        &quot;census_code&quot;: &quot;${census_code}&quot;,&#xd;
        &quot;region&quot;: &quot;${region}&quot;,&#xd;
        &quot;language&quot;: &quot;${language}&quot;,&#xd;
        &quot;latitude&quot;: &quot;0&quot;,&#xd;
        &quot;longitude&quot;: &quot;0&quot;,&#xd;
        &quot;pincode&quot;: &quot;${pincode}&quot;,&#xd;
        &quot;category&quot;: &quot;RURAL&quot;,&#xd;
        &quot;state_code&quot;: &quot;${state_code}&quot;,&#xd;
        &quot;district_code&quot;: &quot;${district_code}&quot;,&#xd;
        &quot;sub_district_code&quot;: &quot;${sub_district_code}&quot;,&#xd;
        &quot;village_code&quot;: &quot;${village_code}&quot;,&#xd;
        &quot;risk_category&quot; : &quot;${risk_category}&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sessionKey Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">session_token</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;session_token&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="officeID Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">office_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.office_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-User Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">user_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">notFound</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for session token" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">session_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for user_id" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query"> ${__setProperty(sesh,${session_token})}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Employee ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">empId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.employee_details.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">3</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name"></stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Response status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.response_status.status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">100</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(&quot;${status}&quot; == &quot;FAIL&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Loop - CreateOrUpdateCsdHierElmVtc" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${npPATH}/createOrUpdateCsdHierElmVtc</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;headers&quot;: {&#xd;
		&quot;tenant_code&quot;: &quot;mfi&quot;,&#xd;
		&quot;function_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;function_sub_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;channel_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_ip&quot;: &quot;&quot;,&#xd;
		&quot;transmission_datetime&quot;: &quot;${timestamp}&quot;,&#xd;
		&quot;stan&quot;: &quot;${__RandomString(42,1234567890,)}&quot;,&#xd;
		&quot;operation_mode&quot;: &quot;SYSTEM&quot;,&#xd;
		&quot;run_mode&quot;: &quot;REAL&quot;,&#xd;
		&quot;actor_type&quot;: &quot;CUSTOMER&quot;,&#xd;
		&quot;user_id&quot; : &quot;2&quot;&#xd;
	},&#xd;
	 &quot;request&quot;: {&#xd;
        &quot;country_code&quot;: &quot;${country_code}&quot;,&#xd;
        &quot;country_language&quot;: &quot;${country_language}&quot;,&#xd;
        &quot;country&quot;: &quot;${country}&quot;,&#xd;
        &quot;state&quot;: &quot;${state}&quot;,&#xd;
        &quot;district&quot;: &quot;${district}&quot;,&#xd;
        &quot;sub_district&quot;: &quot;${sub_district}&quot;,&#xd;
        &quot;village_name&quot;: &quot;${village_name}&quot;,&#xd;
        &quot;census_code&quot;: &quot;${census_code}&quot;,&#xd;
        &quot;region&quot;: &quot;${region}&quot;,&#xd;
        &quot;language&quot;: &quot;${language}&quot;,&#xd;
        &quot;latitude&quot;: &quot;0&quot;,&#xd;
        &quot;longitude&quot;: &quot;0&quot;,&#xd;
        &quot;pincode&quot;: &quot;${pincode}&quot;,&#xd;
        &quot;category&quot;: &quot;RURAL&quot;,&#xd;
        &quot;state_code&quot;: &quot;${state_code}&quot;,&#xd;
        &quot;district_code&quot;: &quot;${district_code}&quot;,&#xd;
        &quot;sub_district_code&quot;: &quot;${sub_district_code}&quot;,&#xd;
        &quot;village_code&quot;: &quot;${village_code}&quot;,&#xd;
        &quot;risk_category&quot; : &quot;${risk_category}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sessionKey Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">session_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;session_token&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="officeID Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">office_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.office_id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-User Id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">user_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">notFound</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for session token" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">session_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.session_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for user_id" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query"> ${__setProperty(sesh,${session_token})}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Employee ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">empId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.employee_details.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">3</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name"></stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Response status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.response_status.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">100</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="final fail capture" enabled="true">
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__javaScript(&quot;${status}&quot; == &quot;FAIL&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Final Loop - CreateOrUpdateCsdHierElmVtc" enabled="true">
                <stringProp name="HTTPSampler.domain">${URL}</stringProp>
                <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.path">${npPATH}/createOrUpdateCsdHierElmVtc</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;headers&quot;: {&#xd;
		&quot;tenant_code&quot;: &quot;mfi&quot;,&#xd;
		&quot;function_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;function_sub_code&quot;: &quot;DEFAULT&quot;,&#xd;
		&quot;channel_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_code&quot;: &quot;NOVOPAY&quot;,&#xd;
		&quot;client_ip&quot;: &quot;&quot;,&#xd;
		&quot;transmission_datetime&quot;: &quot;${timestamp}&quot;,&#xd;
		&quot;stan&quot;: &quot;${__RandomString(42,1234567890,)}&quot;,&#xd;
		&quot;operation_mode&quot;: &quot;SYSTEM&quot;,&#xd;
		&quot;run_mode&quot;: &quot;REAL&quot;,&#xd;
		&quot;actor_type&quot;: &quot;CUSTOMER&quot;,&#xd;
		&quot;user_id&quot; : &quot;2&quot;&#xd;
	},&#xd;
	 &quot;request&quot;: {&#xd;
        &quot;country_code&quot;: &quot;${country_code}&quot;,&#xd;
        &quot;country_language&quot;: &quot;${country_language}&quot;,&#xd;
        &quot;country&quot;: &quot;${country}&quot;,&#xd;
        &quot;state&quot;: &quot;${state}&quot;,&#xd;
        &quot;district&quot;: &quot;${district}&quot;,&#xd;
        &quot;sub_district&quot;: &quot;${sub_district}&quot;,&#xd;
        &quot;village_name&quot;: &quot;${village_name}&quot;,&#xd;
        &quot;census_code&quot;: &quot;${census_code}&quot;,&#xd;
        &quot;region&quot;: &quot;${region}&quot;,&#xd;
        &quot;language&quot;: &quot;${language}&quot;,&#xd;
        &quot;latitude&quot;: &quot;0&quot;,&#xd;
        &quot;longitude&quot;: &quot;0&quot;,&#xd;
        &quot;pincode&quot;: &quot;${pincode}&quot;,&#xd;
        &quot;category&quot;: &quot;RURAL&quot;,&#xd;
        &quot;state_code&quot;: &quot;${state_code}&quot;,&#xd;
        &quot;district_code&quot;: &quot;${district_code}&quot;,&#xd;
        &quot;sub_district_code&quot;: &quot;${sub_district_code}&quot;,&#xd;
        &quot;village_code&quot;: &quot;${village_code}&quot;,&#xd;
        &quot;risk_category&quot; : &quot;${risk_category}&quot;&#xd;
    }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="sessionKey Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">session_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;session_token&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="officeID Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">office_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.office_id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor-User Id" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">user_id</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">notFound</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for session token" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">session_token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.session_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor for user_id" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">user_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.user_details.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
                  <stringProp name="BeanShellAssertion.query"> ${__setProperty(sesh,${session_token})}</stringProp>
                  <stringProp name="BeanShellAssertion.filename"></stringProp>
                  <stringProp name="BeanShellAssertion.parameters"></stringProp>
                  <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
                </BeanShellAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Employee ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">empId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.employee_details.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">3</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name"></stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Response status" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">status</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.response_status.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">100</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">true</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>true</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>true</responseData>
                      <samplerData>true</samplerData>
                      <xml>true</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>true</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <fileName>true</fileName>
                      <hostname>true</hostname>
                      <threadCounts>true</threadCounts>
                      <sampleCount>true</sampleCount>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename">./errorList_vtc_UP_02.jtl</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">40</stringProp>
          </ConstantTimer>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
            <stringProp name="WhileController.condition">//${__javaScript(&quot;${JMeterThread.last_sample_ok}&quot; == &quot;false&quot; &amp;&amp; ${Counter} &lt; 2,true)}
${__javaScript(&quot;${JMeterThread.last_sample_ok}&quot; == &quot;false&quot; &amp;&amp; parseInt(vars.get(&quot;Counter&quot;)) &lt; 3)}

</stringProp>
          </WhileController>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">true</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\Mayank\Videos\Jmeter_script\error_meghalya.txt</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>true</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">C:\Users\Mayank\Pictures\Jmeter_result\meghalya.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">./VTC_UP_02.csv</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
